{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{103:function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return p})),n.d(t,\"b\",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n=\"function\"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:\"code\",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),p=u(n),b=r,m=p[\"\".concat(o,\".\").concat(b)]||p[b]||d[b]||i;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if(\"string\"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType=\"string\"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName=\"MDXCreateElement\"},148:function(e,t,n){\"use strict\";n.r(t),t.default=n.p+\"assets/images/pipeline-2504ec1fbe38fc6bef12bcf5e250a696.png\"},68:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return o})),n.d(t,\"metadata\",(function(){return c})),n.d(t,\"rightToc\",(function(){return s})),n.d(t,\"default\",(function(){return u}));var r=n(3),a=n(7),i=(n(0),n(103)),o={id:\"intro\",title:\"Introduction\",slug:\"/\"},c={unversionedId:\"intro\",id:\"intro\",isDocsHomePage:!1,title:\"Introduction\",description:\"Background\",source:\"@site/docs/intro.md\",slug:\"/\",permalink:\"/rRNADif/docs/\",editUrl:\"https://github.com/pavlohrab/rRNADif-docs/docs/intro.md\",version:\"current\",sidebar:\"someSidebar\",next:{title:\"Installation and Prerequisites\",permalink:\"/rRNADif/docs/installation\"}},s=[{value:\"Background\",id:\"background\",children:[]},{value:\"Pipeline\",id:\"pipeline\",children:[]},{value:\"What&#39;s next?\",id:\"whats-next\",children:[]},{value:\"Contributing\",id:\"contributing\",children:[]},{value:\"Citation\",id:\"citation\",children:[]}],l={rightToc:s};function u(e){var t=e.components,o=Object(a.a)(e,[\"components\"]);return Object(i.b)(\"wrapper\",Object(r.a)({},l,o,{components:t,mdxType:\"MDXLayout\"}),Object(i.b)(\"h2\",{id:\"background\"},\"Background\"),Object(i.b)(\"p\",null,\"rRNADif is an automatic pipeline for measuring intragenomic 16S rRNA variability in the input genome sequence. The method itself depends on constructing Maximum Likelihood phylogenetic trees for a set of 16S sequences and as variability measure, we use branch length. Mean and medium branch length variability is then compared to the desired group of organisms. Therefore this method highly depends on a chosen group of organisms for comparison and visual inspection of a final phylogenetic species tree to answer the question of how the variability effect species representation.\"),Object(i.b)(\"h2\",{id:\"pipeline\"},\"Pipeline\"),Object(i.b)(\"p\",null,'Two inputs are mandatory to the program: genome sequence in fasta format and .csv file from \"Browse by genome\" tab on Genome component of NCBI. The .csv file is used for subsetting precomputed database. Note: ',Object(i.b)(\"strong\",{parentName:\"p\"},\"If all database if meant to be used, then .csv file should also be provided, containing organisms for entire database\"),\"\\nAfter providing requested files the following steps are performed:\"),Object(i.b)(\"ol\",null,Object(i.b)(\"li\",{parentName:\"ol\"},\"Annotating 16S sequences with barrnap from genome \"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Performing Multiple Sequence alignment of annotated sequences (default mafft. Can use muscle, clustalw)\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Computing phylogenetic tree (default fasttree. Can use iqtree, raxml. Model is GTR)\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Extracting branch length information from the tree. Computing mean and median\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Subsetting a precomputed database with the .csv file. Extracting sequences and mean/median values per genome\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Combining mean/median values from annotated 16S with the database ones\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"Calculating statistics. Se if values from provided 16S are within 1.5 IQR. If not there are considered outliers with the compared dataset\"),Object(i.b)(\"li\",{parentName:\"ol\"},\"(optional) Compute phylogenetic tree, where genomes, whose 16S are within 1,5 IQR are represented with one sequence (species representative), while for other genomes all sequences are used.\")),Object(i.b)(\"p\",null,\"Better pipeline explanation is provided with the illustration below\\n\",Object(i.b)(\"img\",{alt:\"alt text\",src:n(148).default}),\" \"),Object(i.b)(\"h2\",{id:\"whats-next\"},\"What's next?\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},\"To get hands right into the analysis you can start with our \",Object(i.b)(\"a\",Object(r.a)({parentName:\"li\"},{href:\"/rRNADif/docs/get_started\"}),\"Get_started\"),\" guide, using example dataset.\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"If you are not happy with algorithm options for MSA of ML tree computation you can check \",Object(i.b)(\"a\",Object(r.a)({parentName:\"li\"},{href:\"/rRNADif/docs/add\"}),\"Non-standard inputs\"),\" guide. You can provide .fasta (for MSA)  and .nwk (for a phylogeny) computed files into the pipeline. \"),Object(i.b)(\"li\",{parentName:\"ul\"},\"For output interpretation you can use our \",Object(i.b)(\"a\",Object(r.a)({parentName:\"li\"},{href:\"/rRNADif/docs/output\"}),\"Understand the output\"),\" guide.\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Need to compute final phylogenetic tree and supporting plots? \",Object(i.b)(\"a\",Object(r.a)({parentName:\"li\"},{href:\"/rRNADif/docs/output2\"}),\"Create plots and phylogenetic tree\"),\" guide is here for you!\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Precomputed database from 21000+ fully sequenced bacterial genomes do not serve your purposes? Want to compare to the one taxa with draft genomes included? You can \",Object(i.b)(\"a\",Object(r.a)({parentName:\"li\"},{href:\"/rRNADif/docs/database_creation\"}),\"Create custom database and run analysis with it\"),\". \")),Object(i.b)(\"h2\",{id:\"contributing\"},\"Contributing\"),Object(i.b)(\"p\",null,\"Are you get excited by the tool? Do you know how to improve it? For now, this is an individual project with no strict contributing guidelines, therefore feel free to open an issue at GitHub or directly contact me.\\nAn incomplete to-do list of things that can be improved:\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},\"Include other methods of sequence dissimilarity evaluation (maybe there are any just for rRNA). Phylogenetic trees seems an overkill.\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Other statistical techniques for 16S heterogeneity comparison between inputs and database\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Extend the scope to other phylogenetic markers. Make \",Object(i.b)(\"em\",{parentName:\"li\"},\"method for similarity evaluation of duplicated phylogenetic markers in one genome\"),\" \"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Make the documentation more fluent and concise \")),Object(i.b)(\"h2\",{id:\"citation\"},\"Citation\"),Object(i.b)(\"p\",null,\"As stated on GitHub repo this is work in progress, so publication is available for now. But if you found this tool valuable, please cite:\\nP. Hrab & B. Ostash 2020: rRNADif, GitHub repository:\",Object(i.b)(\"a\",Object(r.a)({parentName:\"p\"},{href:\"https://github.com/pavlohrab/rRNADif\"}),\"https://github.com/pavlohrab/rRNADif\")))}u.isMDXComponent=!0}}]);","name":"0e384e19.65973c80.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[5],{\n\n/***/ 103:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MDXContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createElement; });\n/* unused harmony export useMDXComponents */\n/* unused harmony export withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 148:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/pipeline-2504ec1fbe38fc6bef12bcf5e250a696.png\");\n\n/***/ }),\n\n/***/ 68:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(103);\nvar frontMatter={id:'intro',title:'Introduction',slug:'/'};var metadata={\"unversionedId\":\"intro\",\"id\":\"intro\",\"isDocsHomePage\":false,\"title\":\"Introduction\",\"description\":\"Background\",\"source\":\"@site/docs/intro.md\",\"slug\":\"/\",\"permalink\":\"/rRNADif/docs/\",\"editUrl\":\"https://github.com/pavlohrab/rRNADif-docs/docs/intro.md\",\"version\":\"current\",\"sidebar\":\"someSidebar\",\"next\":{\"title\":\"Installation and Prerequisites\",\"permalink\":\"/rRNADif/docs/installation\"}};/* @jsxRuntime classic */ /* @jsx mdx */var rightToc=[{value:'Background',id:'background',children:[]},{value:'Pipeline',id:'pipeline',children:[]},{value:'What&#39;s next?',id:'whats-next',children:[]},{value:'Contributing',id:'contributing',children:[]},{value:'Citation',id:'citation',children:[]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(MDXLayout,Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h2\",{\"id\":\"background\"},\"Background\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"rRNADif is an automatic pipeline for measuring intragenomic 16S rRNA variability in the input genome sequence. The method itself depends on constructing Maximum Likelihood phylogenetic trees for a set of 16S sequences and as variability measure, we use branch length. Mean and medium branch length variability is then compared to the desired group of organisms. Therefore this method highly depends on a chosen group of organisms for comparison and visual inspection of a final phylogenetic species tree to answer the question of how the variability effect species representation.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h2\",{\"id\":\"pipeline\"},\"Pipeline\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Two inputs are mandatory to the program: genome sequence in fasta format and .csv file from \\\"Browse by genome\\\" tab on Genome component of NCBI. The .csv file is used for subsetting precomputed database. Note: \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"strong\",{parentName:\"p\"},\"If all database if meant to be used, then .csv file should also be provided, containing organisms for entire database\"),\"\\nAfter providing requested files the following steps are performed:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ol\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Annotating 16S sequences with barrnap from genome \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Performing Multiple Sequence alignment of annotated sequences (default mafft. Can use muscle, clustalw)\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Computing phylogenetic tree (default fasttree. Can use iqtree, raxml. Model is GTR)\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Extracting branch length information from the tree. Computing mean and median\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Subsetting a precomputed database with the .csv file. Extracting sequences and mean/median values per genome\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Combining mean/median values from annotated 16S with the database ones\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"Calculating statistics. Se if values from provided 16S are within 1.5 IQR. If not there are considered outliers with the compared dataset\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ol\"},\"(optional) Compute phylogenetic tree, where genomes, whose 16S are within 1,5 IQR are represented with one sequence (species representative), while for other genomes all sequences are used.\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Better pipeline explanation is provided with the illustration below\\n\",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{alt:\"alt text\",src:__webpack_require__(148).default}),\" \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h2\",{\"id\":\"whats-next\"},\"What's next?\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"To get hands right into the analysis you can start with our \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"li\"},{\"href\":\"/rRNADif/docs/get_started\"}),\"Get_started\"),\" guide, using example dataset.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"If you are not happy with algorithm options for MSA of ML tree computation you can check \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"li\"},{\"href\":\"/rRNADif/docs/add\"}),\"Non-standard inputs\"),\" guide. You can provide .fasta (for MSA)  and .nwk (for a phylogeny) computed files into the pipeline. \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"For output interpretation you can use our \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"li\"},{\"href\":\"/rRNADif/docs/output\"}),\"Understand the output\"),\" guide.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Need to compute final phylogenetic tree and supporting plots? \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"li\"},{\"href\":\"/rRNADif/docs/output2\"}),\"Create plots and phylogenetic tree\"),\" guide is here for you!\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Precomputed database from 21000+ fully sequenced bacterial genomes do not serve your purposes? Want to compare to the one taxa with draft genomes included? You can \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"li\"},{\"href\":\"/rRNADif/docs/database_creation\"}),\"Create custom database and run analysis with it\"),\". \")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h2\",{\"id\":\"contributing\"},\"Contributing\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Are you get excited by the tool? Do you know how to improve it? For now, this is an individual project with no strict contributing guidelines, therefore feel free to open an issue at GitHub or directly contact me.\\nAn incomplete to-do list of things that can be improved:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Include other methods of sequence dissimilarity evaluation (maybe there are any just for rRNA). Phylogenetic trees seems an overkill.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Other statistical techniques for 16S heterogeneity comparison between inputs and database\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Extend the scope to other phylogenetic markers. Make \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"em\",{parentName:\"li\"},\"method for similarity evaluation of duplicated phylogenetic markers in one genome\"),\" \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Make the documentation more fluent and concise \")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h2\",{\"id\":\"citation\"},\"Citation\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"As stated on GitHub repo this is work in progress, so publication is available for now. But if you found this tool valuable, please cite:\\nP. Hrab & B. Ostash 2020: rRNADif, GitHub repository:\",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"a\",Object(_run_media_pavloh_DATA_BANK_WORK_rRNADif_docs_website_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"p\"},{\"href\":\"https://github.com/pavlohrab/rRNADif\"}),\"https://github.com/pavlohrab/rRNADif\")));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}